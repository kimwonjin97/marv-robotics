# Copyright 2016 - 2020  Ternaris.
# SPDX-License-Identifier: AGPL-3.0-only

import functools
from collections import OrderedDict
from inspect import isgeneratorfunction

from marv_node.node import InputSpec, Node, StreamSpec


class InputNameCollision(Exception):
    """An input with the same name already has been declared."""


def input(name, default=None, foreach=None):
    """Declare input for a node.

    Plain inputs, that is plain python objects, are directly passed to
    the node. Whereas streams generated by other nodes are requested
    and once the handles of all input streams are available the node
    is instantiated.

    Args:
        name (str): Name of the node function argument the input will
            be passed to.
        default: An optional default value for the input. This can be
            any python object or another node.
        foreach (bool): This parameter is currently not supported and
            only for internal usage.

    Returns:
        The original function decorated with this input
        specification. A function is turned into a node by the
        :func:`node` decorator.

    """
    assert default is None or foreach is None
    value = foreach if foreach is not None else default
    value = StreamSpec(value) if isinstance(value, Node) else value
    foreach = foreach is not None
    spec = InputSpec(name, value, foreach)

    def deco(func):
        specs = func.__dict__.setdefault('__marv_input_specs__', OrderedDict())
        if spec.name in specs:
            raise InputNameCollision(spec.name)
        specs[spec.name] = spec
        return func
    deco.__doc__ = f"""Add {spec!r} to function."""
    return deco


def node(schema=None, group=None, version=None):
    """Turn function into node.

    Args:
        schema: capnproto schema describing the output messages format
        group (bool): A boolean indicating whether the default stream
            of the node is a group, meaning it will be used to
            published handles for streams or further groups. In case
            of :paramref:`marv.input.foreach` specifications this flag will
            default to `True`. This parameter is currently only for
            internal usage.
        version (int): This parameter currently has no effect.

    Returns:
        A :class:`Node` instance according to the given
        arguments and :func:`input` decorators.

    """
    def deco(func):
        if isinstance(func, Node):
            raise TypeError('Attempted to convert function into node twice.')
        assert isgeneratorfunction(func), \
            f'Node {func.__module__}:{func.__name__} needs to be a generator function'

        specs = getattr(func, '__marv_input_specs__', None)
        if hasattr(func, '__marv_input_specs__'):
            del func.__marv_input_specs__

        _node = Node(func, schema=schema, group=group, specs=specs, version=version)
        functools.update_wrapper(_node, func)
        return _node
    deco.__doc__ = f"""Turn function into node with given arguments.

        :func:`node`(schema={schema!r}, group={group!r})
        """
    return deco


# NOTE: Strictly speaking not a decorator but related to decoration of node functions
def select(node, name):  # pylint: disable=redefined-outer-name
    """Select specific stream of a node by name.

    Args:
        node: A node producing a group of streams.
        name (str): Name of stream to select.

    Returns:
        Node outputting selected stream.

    """
    return StreamSpec(node, name)


__all__ = (
    'input',
    'node',
    'select',
)
